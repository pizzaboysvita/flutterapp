import 'package:dio/dio.dart';
import 'package:pizza_boys/core/helpers/api_client_helper.dart';
import 'package:pizza_boys/core/storage/api_res_storage.dart';

class PromoRepository {
  Future<List<Map<String, dynamic>>> fetchPromos(int storeId) async {
    print("\nüü¶============================");
    print("üü¶ [PromoRepository] fetchPromos() CALLED");
    print("üü¶ Store ID: $storeId");
    print("============================\n");

    try {
      // üîë Fetch stored access token
      final token = await TokenStorage.getAccessToken();
      print("üîë [PromoRepository] Current Access Token: $token");

      // ‚úÖ Prepare request URL
      final String url = "${ApiClient.dio.options.baseUrl}promocode";
      print("üåê [PromoRepository] Request URL: $url");
      print("üì¶ [PromoRepository] Query Params: {store_id: $storeId}");

      // ‚úÖ Make GET request
      final response = await ApiClient.dio.get(
        "promocode",
        queryParameters: {"store_id": storeId},
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );

      // üßæ Log response
      print("\nüì° [PromoRepository] API RESPONSE:");
      print("‚û°Ô∏è Status Code: ${response.statusCode}");
      print("‚û°Ô∏è Response Body: ${response.data}");

      // ‚úÖ Success case
      if (response.statusCode == 200 && response.data["code"] == 1) {
        final List data = response.data["data"];
        print(
          "‚úÖ [PromoRepository] Promo fetch successful | Count: ${data.length}",
        );
        return data.map((e) => e as Map<String, dynamic>).toList();
      } else {
        print(
          "‚ö†Ô∏è [PromoRepository] API returned failure | Code: ${response.data["code"]}",
        );
        throw Exception("Failed to load promo codes");
      }
    } on DioException catch (e) {
      print("\nüö® [PromoRepository] DioException caught!");
      print("‚û°Ô∏è Error Type: ${e.type}");
      print("‚û°Ô∏è Message: ${e.message}");
      print("‚û°Ô∏è Status Code: ${e.response?.statusCode}");
      print("‚û°Ô∏è Response Data: ${e.response?.data}");
      print("‚û°Ô∏è Request Options: ${e.requestOptions.uri}");
      print("‚û°Ô∏è Headers Sent: ${e.requestOptions.headers}");

      // Detect expired token or refresh fail
      if (e.response?.statusCode == 401) {
        print(
          "üîÅ [PromoRepository] Got 401 Unauthorized ‚Äî Token may have expired or refresh failed",
        );
      }

      rethrow;
    } catch (e, s) {
      print("\n‚ùå [PromoRepository] Unknown Exception: $e");
      print("üß© Stacktrace: $s");
      rethrow;
    }
  }
}
